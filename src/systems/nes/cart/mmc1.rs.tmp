pub struct Mmc1 {
    prg: Prg,
    chr: mem::Empty,
    log: slog::Logger
}

impl Mmc1 {
    pub fn new(rom: Vec<u8>, logger: Option<slog::Logger>) -> Mmc1 {
        let log = logger.unwrap_or(slog::Logger::root(slog_stdlog::StdLog.fuse(), o!()));
        Mmc1 {
            prg: Prg::new(rom, log.clone()),
            chr: mem::Empty
            log: log
        }
    }
}

impl nes::Mapper for Mmc1 {
    fn prg(&self) -> &mem::Memory
    {
        return &self.prg;
    }

    fn prg_mut(&mut self) -> &mut mem::Memory
    {
        return &mut self.prg;
    }

    fn chr(&self) -> &mem::Memory
    {
        return &self.chr;
    }

    fn chr_mut(&mut self) -> &mut mem::Memory
    {
        return &mut self.chr;
    }
}

enum PrgMode {
    SwitchBoth,
    SwitchFirst,
    SwitchLast
}

struct Prg {
    ram: mem::Fixed,
    rom: mem::Fixed,
    sr: u8,
    prg_0_base: u64,
    prg_1_base: u64
    log: slog::Logger,
}

impl Prg {
    pub fn new(rom: Vec<u8>, log: slog::Logger) -> Prg {
        Prg {
            ram: mem::Fixed::new(8192),
            rom: mem::Fixed::from_contents(rom),
            sr: 0x10,

            // Default configuration: 32KB
            prg_0_base: 0,
            prg_1_base: 0x4000,

            log: log
        }
    }
}

impl mem::Memory for Prg {
    fn len(&self) -> u64 { 0xA000 }

    fn get_u8(&self, addr: u64) -> mem::Result<u8> {
        if addr < 0x6000 {
            // Out of range!
            Err(mem::Error::with_detail(
                    mem::ErrorKind::OutOfBounds,
                    "memory access out of range addressable on MMC1 cartridge",
                    format!("${:4X} is below the addressable range of 0x6000-0xFFFF", addr)))
        } else if addr < 0x8000 {
            // RAM! Mirrored as needed
            let eaddr = (addr - 0x6000) % self.ram.len();
            info!(self.log,
                "vaddr" => addr,
                "paddr" => eaddr,
                "target" => "RAM";
                "read from ${:4X} going to RAM at ${:8X}", addr, eaddr);
            self.ram.get_u8(eaddr)
        } else if addr < 0xC000 {
            // PRG bank 0
            let eaddr = (addr - 0x8000) % self.ram.len();
            let prg_addr = self.prg_0_base + eaddr;
            info!(self.log,
                "vaddr" => addr, 
                "paddr" => prg_addr, 
                "target" => "PRG", 
                "bank" => 0;
                "read from ${:4X} going to PRG at ${:8X}", addr, prg_addr);
            self.rom.get_u8(prg_addr);
        } else {
            // PRG bank 1
            let eaddr = (addr - 0xC000) % self.ram.len();
            let prg_addr = self.prg_1_base + eaddr;
            info!(self.log,
                "vaddr" => addr,
                "paddr" => prg_addr, 
                "target" => "PRG", 
                "bank" => 1;
                "read from ${:4X} going to PRG at ${:8X}", addr, prg_addr);
            self.rom.get_u8(prg_addr);
        }
    }

    fn set_u8(&self, addr: u64, val: u8) -> mem::Result<()> {
    }
}
